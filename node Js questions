Mean :
   Mean js   is the powerful collection of javascript framework.Mean is the abrevation of MongoDB,Express, Angular, Node.Bys using this stack, we can create complete web application.
Express: 
It is a middleware between frontend and backend.It is mostly used to create routes and end points like api.
it is responds to Http requests. Its is used for routing which means it can render html page dynamically and it can perform all http methods like POST,PUT,DELETE,GET.
Node Js :
Node js is a powerful javascript framework or run environment built on google chrome v8 engine.Its a single threaded event loop and it does not block the excecution.It can handle concurrent request without creating multiple threads.
Usage of nodejs:
1)Real time application
2)I/O based application
3)JSON based api application
4)Single page application
* It can be used in advertisement server and streaming server(client based application)
* It cannot be used for CPU intensive application and long processing time
Asynchronous:
All Api's are asynchronous.Node js receive request for I/O operation, it processing the request and will excecute in the backgroung and it cointinue with processing other request.It will not wait for response from the previous request.
Single Thread : 
Node Js uses single thread for event looping.It can handle 100s of request in a single thread , without creating multiple thread.The response for the request to the server may reach or may not reach immediately , It does not block other operation.Thus makes highly scalable.If 100s of request lined up in nodeJs queue , it receive the request and send it to the event loop and processing the request in the backend for execution.When the operation completed it send the desired result to the registered callback.
Callback:(err,result)
All ApIs of node JS writtedn in callback support. Callbacks are asynchronous.Node Js using callbacks heavily.If Node completed the request operation and then it call the reqistered callback and pass the desired output as argument.Hense , there is no blocking or wait, This makes nodejs highly scalable.
Event loop process:
Event loop , which process the request and convert them into callback  function.While processing the request, node js attach the callbacks with it and send it to backent for operation.After completing the operation , the callback function triggered to send the result.
Events:
Event is a npm module which has EventEmitter class.This can be used to create or handle the events.If eventEmitter encounter any new listener added , it fires newListener.If it encounters any listener removed, it call removeListener.If it encountered any error, it emit error event.EventEmitter provide on and emit property .     emit-fire,on-bind.
data-read,end-no data to read,error - occuring error ,finish - after completing all the process
Types of stream:
readable , writable,dupelex, transform.transform -for computation
REPL: 
Read Eval Print Loop . Read user input,excecute data structure, print o/p , loop the process until the ctrl c pressed twice.                                                      
ctrl C, ctrl D , break , up,down arrows,.load , .help,.save,.clear tab 
Multi-core Platform:
Node supprts multicore system,bcoz of single thread it cant be completely utilized.Cluster module is used to starting multiple worker process that will share same port.
Key Points: 
1)No buffer - output data in chunks
2)callback hell -because of heavily  nested callback.prevent by using promise, and creating small modules and joining them in main modules  and using async mechanism(async.waterfall and async.map)
3)npm-online repository, we can download npm and use it.npm install.
4)Package.json-  contains all the project dependencies and commands (meta file).
5)global - namespace objec.define by without declaring var key word.process - one of the global object.
6)buffer- used to handle binary data.we can string to buffer.But it requires, mentioning the encodeing type.ex <base64>
7)content-type: text/plain, text/html,application/json,multipart/form-data
8)Chaining process-connect output of one stream to input of another stream ,creating chain of multiple stream process
9)Child process- NodeJs supports child process for parallel processing request along with event driven model.
10)control flow - piece of code runs b/w several async functions, it can control the order of execution, limit concurrency, call the next step, collect data.
